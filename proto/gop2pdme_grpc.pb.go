// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/gop2pdme.proto

package gop2pdme

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// P2PServiceClient is the client API for P2PService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P2PServiceClient interface {
	Recv(ctx context.Context, opts ...grpc.CallOption) (P2PService_RecvClient, error)
}

type p2PServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PServiceClient(cc grpc.ClientConnInterface) P2PServiceClient {
	return &p2PServiceClient{cc}
}

func (c *p2PServiceClient) Recv(ctx context.Context, opts ...grpc.CallOption) (P2PService_RecvClient, error) {
	stream, err := c.cc.NewStream(ctx, &P2PService_ServiceDesc.Streams[0], "/gop2pdme.P2PService/Recv", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PServiceRecvClient{stream}
	return x, nil
}

type P2PService_RecvClient interface {
	Send(*Post) error
	CloseAndRecv() (*Post, error)
	grpc.ClientStream
}

type p2PServiceRecvClient struct {
	grpc.ClientStream
}

func (x *p2PServiceRecvClient) Send(m *Post) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p2PServiceRecvClient) CloseAndRecv() (*Post, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Post)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P2PServiceServer is the server API for P2PService service.
// All implementations must embed UnimplementedP2PServiceServer
// for forward compatibility
type P2PServiceServer interface {
	Recv(P2PService_RecvServer) error
	mustEmbedUnimplementedP2PServiceServer()
}

// UnimplementedP2PServiceServer must be embedded to have forward compatible implementations.
type UnimplementedP2PServiceServer struct {
}

func (UnimplementedP2PServiceServer) Recv(P2PService_RecvServer) error {
	return status.Errorf(codes.Unimplemented, "method Recv not implemented")
}
func (UnimplementedP2PServiceServer) mustEmbedUnimplementedP2PServiceServer() {}

// UnsafeP2PServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PServiceServer will
// result in compilation errors.
type UnsafeP2PServiceServer interface {
	mustEmbedUnimplementedP2PServiceServer()
}

func RegisterP2PServiceServer(s grpc.ServiceRegistrar, srv P2PServiceServer) {
	s.RegisterService(&P2PService_ServiceDesc, srv)
}

func _P2PService_Recv_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PServiceServer).Recv(&p2PServiceRecvServer{stream})
}

type P2PService_RecvServer interface {
	SendAndClose(*Post) error
	Recv() (*Post, error)
	grpc.ServerStream
}

type p2PServiceRecvServer struct {
	grpc.ServerStream
}

func (x *p2PServiceRecvServer) SendAndClose(m *Post) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p2PServiceRecvServer) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P2PService_ServiceDesc is the grpc.ServiceDesc for P2PService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2PService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gop2pdme.P2PService",
	HandlerType: (*P2PServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Recv",
			Handler:       _P2PService_Recv_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/gop2pdme.proto",
}
